///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace HB_INSTALL_AUTO
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The RegisterHB recording.
    /// </summary>
    [TestModule("02167738-89fa-4bd8-987f-73d74dc2b4b4", ModuleType.Recording, 1)]
    public partial class RegisterHB : ITestModule
    {
        /// <summary>
        /// Holds an instance of the HB_INSTALL_AUTORepository repository.
        /// </summary>
        public static HB_INSTALL_AUTORepository repo = HB_INSTALL_AUTORepository.Instance;

        static RegisterHB instance = new RegisterHB();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public RegisterHB()
        {
            RegistrationCode = "01AF8E32-C236-435F-8C95-2518C339B7C0";
            SystemType = "Advanced Multiuser";
            RegistrationName = "Test Company";
            Licenses = "100";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static RegisterHB Instance
        {
            get { return instance; }
        }

#region Variables

        string _RegistrationCode;

        /// <summary>
        /// Gets or sets the value of variable RegistrationCode.
        /// </summary>
        [TestVariable("d65c4ab9-9643-45fd-aeae-c34fd340a0e4")]
        public string RegistrationCode
        {
            get { return _RegistrationCode; }
            set { _RegistrationCode = value; }
        }

        string _SystemType;

        /// <summary>
        /// Gets or sets the value of variable SystemType.
        /// </summary>
        [TestVariable("661975a3-4416-4542-b175-b94e52478a5b")]
        public string SystemType
        {
            get { return _SystemType; }
            set { _SystemType = value; }
        }

        string _RegistrationName;

        /// <summary>
        /// Gets or sets the value of variable RegistrationName.
        /// </summary>
        [TestVariable("85c7ac2e-ca25-4b16-a0da-2e05c3784f87")]
        public string RegistrationName
        {
            get { return _RegistrationName; }
            set { _RegistrationName = value; }
        }

        string _Licenses;

        /// <summary>
        /// Gets or sets the value of variable Licenses.
        /// </summary>
        [TestVariable("b8eff3fd-81d6-45c4-9b13-57f9fbd543de")]
        public string Licenses
        {
            get { return _Licenses; }
            set { _Licenses = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.1")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.1")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            //Report.Log(ReportLevel.Info, "Wait", "Waiting 30s to exist. Associated repository item: 'HeavyBidRegistration.RegistrationEntry'", repo.HeavyBidRegistration.RegistrationEntryInfo, new ActionTimeout(30000), new RecordItemIndex(0));
            //repo.HeavyBidRegistration.RegistrationEntryInfo.WaitForExists(30000);
            
            //Report.Log(ReportLevel.Info, "Mouse", "Mouse Left DoubleClick item 'HeavyBidRegistration.RegistrationEntry' at Center.", repo.HeavyBidRegistration.RegistrationEntryInfo, new RecordItemIndex(1));
            //repo.HeavyBidRegistration.RegistrationEntry.DoubleClick();
            //Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 1s.", new RecordItemIndex(2));
            Delay.Duration(1000, false);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$RegistrationCode' with focus on 'HeavyBidRegistration.RegistrationEntry'.", repo.HeavyBidRegistration.RegistrationEntryInfo, new RecordItemIndex(3));
            repo.HeavyBidRegistration.RegistrationEntry.PressKeys(RegistrationCode);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'HeavyBidRegistration.Check' at Center.", repo.HeavyBidRegistration.CheckInfo, new RecordItemIndex(4));
            repo.HeavyBidRegistration.Check.Click();
            Delay.Milliseconds(200);
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeRegex (Windowtext~$RegistrationName) on item 'HeavyBidRegistration.CompanyNameTextbox'.", repo.HeavyBidRegistration.CompanyNameTextboxInfo, new RecordItemIndex(5));
                Validate.AttributeRegex(repo.HeavyBidRegistration.CompanyNameTextboxInfo, "Windowtext", new Regex(RegistrationName), null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(5)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeRegex (Windowtext~$SystemType) on item 'HeavyBidRegistration.TextboxSystemDescription'.", repo.HeavyBidRegistration.TextboxSystemDescriptionInfo, new RecordItemIndex(6));
                Validate.AttributeRegex(repo.HeavyBidRegistration.TextboxSystemDescriptionInfo, "Windowtext", new Regex(SystemType), null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(6)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeRegex (Windowtext~$Licenses) on item 'HeavyBidRegistration.LicenseTextbox'.", repo.HeavyBidRegistration.LicenseTextboxInfo, new RecordItemIndex(7));
                Validate.AttributeRegex(repo.HeavyBidRegistration.LicenseTextboxInfo, "Windowtext", new Regex(Licenses), null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(7)); }
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 10s to exist. Associated repository item: 'HeavyBidRegistration.Submit'", repo.HeavyBidRegistration.SubmitInfo, new ActionTimeout(10000), new RecordItemIndex(8));
            repo.HeavyBidRegistration.SubmitInfo.WaitForExists(10000);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'HeavyBidRegistration.Submit' at Center.", repo.HeavyBidRegistration.SubmitInfo, new RecordItemIndex(9));
            repo.HeavyBidRegistration.Submit.Click();
            Delay.Milliseconds(200);
            
            try {
                Report.Log(ReportLevel.Info, "Wait", "(Optional Action)\r\nWaiting 30s to exist. Associated repository item: 'ActivateHeavyBidServer.ReplaceTheExistingProductionServerW'", repo.ActivateHeavyBidServer.ReplaceTheExistingProductionServerWInfo, new ActionTimeout(30000), new RecordItemIndex(10));
                repo.ActivateHeavyBidServer.ReplaceTheExistingProductionServerWInfo.WaitForExists(30000);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(10)); }
            
            try {
                Report.Log(ReportLevel.Info, "Mouse", "(Optional Action)\r\nMouse Left Click item 'ActivateHeavyBidServer.ReplaceTheExistingProductionServerW' at Center.", repo.ActivateHeavyBidServer.ReplaceTheExistingProductionServerWInfo, new RecordItemIndex(11));
                repo.ActivateHeavyBidServer.ReplaceTheExistingProductionServerW.Click();
                Delay.Milliseconds(200);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(11)); }
            
            try {
                Report.Log(ReportLevel.Info, "Wait", "(Optional Action)\r\nWaiting 30s to exist. Associated repository item: 'ActivateHeavyBidServer.ButtonOK'", repo.ActivateHeavyBidServer.ButtonOKInfo, new ActionTimeout(30000), new RecordItemIndex(12));
                repo.ActivateHeavyBidServer.ButtonOKInfo.WaitForExists(30000);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(12)); }
            
            try {
                Report.Log(ReportLevel.Info, "Mouse", "(Optional Action)\r\nMouse Left Click item 'ActivateHeavyBidServer.ButtonOK' at Center.", repo.ActivateHeavyBidServer.ButtonOKInfo, new RecordItemIndex(13));
                repo.ActivateHeavyBidServer.ButtonOK.Click();
                Delay.Milliseconds(200);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(13)); }
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
